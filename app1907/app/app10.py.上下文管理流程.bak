from flask import Flask,request,current_app,g
from flask.globals import _request_ctx_stack
from flask import globals

app =  Flask(__name__)


@app.route('/index')
def index():
    print(current_app)
    print(g)
    return 'Index'


if __name__ == '__main__':
    app.run()
    app.__call__



"""
第一阶段： 将request和session相关数据封装到ctx=RequestContext对象中。
            再通过LocalStack将ctx添加到Local中
                __storage__ = {123:{'stack':[ctx(request,session)]}
                
            __call__
            wsgi_app
            ctx = RequestContext(self,environ)
            ctx.request = Request(environ)
            ctx.session = None
            ctx.push()
            
第二阶段：视图函数中获取request或session
    方式一：直接找LocalStack获取     _request_ctx_stack.top.request.method
    
    方式二：通过代理LocalProxy  
            from flask import request
            request.method
            1. request是LocalProxy对象
            2. 对象中有method、执行__getattr__
            
            from flask import session
            session['1'] = 123      执行 __setitem__
"""

"""
请求上下文：
    - 请求上下文：request/session
    - App上下文： app/g
    
程序启动：
    两个Local：
        local1 = {}
        local2 = {}
        
    两个LocalStack：
        _request_ctx_stack
        _app_ctx_stack

请求到来：
    对数据进行封装：
        ctx = RequestContext（request,session）
        app_ctx = AppContext(app,g)
    保存数据：
        将包含了（app,g）数据的app_ctx,利用_app_ctx_stack（LocalStack()）将app_ctx添加到local
            storage = {
                123:{stack:[app_ctx(app,g)]}
                }
        将包含了request，session数据的ctx对象，利用_request_ctx_stack（LocalStack）将app_ctx添加到local
            storage = {
                123:{stack:[ctx(request,session)]}
                }
视图函数处理：
    #去请求上下文中获取值：_request_ctx_stack
    form flask import request,session
        request.method
        session['xxx']
        
    #去app上下文中获取值：_app_ctx_stack
    from flask import current_app,g
        print(current_app)
        print(g)
    
    
请求结束：
    _request_ctx_stack.pop()
    _app_ctx_stack.pop()
"""